# Verify the boot mode 
ls /sys/firmware/efi/efivars
#If the command shows the directory without error, then the system is booted in UEFI mode. If the directory does not exist, the system may be booted in BIOS mode.

# Check internet connection
ping archlinux.org

# Sync time 
timedatectl set-ntp true 

# Wipe disk before install
(echo g;echo w) | fdisk /dev/sda

# /dev/nvme0n1p1 256M EFI
(echo n;echo ;echo ;echo 526335;echo t;echo 1;echo w) | fdisk /dev/sda

# /dev/nvme0n1p2 512M Linux filesystem
(echo n;echo ;echo ;echo 1574911; echo w) | fdisk /dev/sda

# /dev/nvme0n1p3 All Linux filesystem
(echo n;echo ;echo ;echo ; echo w) | fdisk /dev/sda

# Load encrypt modules 
modprobe dm-crypt
modprobe dm-mod

# Encrypt and open /dev/sda3
cryptsetup luksFormat -v -s 512 -h sha512 /dev/sda3    (mireatop)
cryptsetup open /dev/sda3 lfs

# Formatting the partitions
mkfs.vfat -n "EFI System" /dev/sda1
mkfs.ext4 -L boot /dev/sda2
mkfs.ext4 -L root /dev/mapper/lfs

# Mount partitions and create folders
mount /dev/mapper/lfs /mnt
mkdir /mnt/boot
mount /dev/sda2 /mnt/boot
mkdir /mnt/boot/efi
mount /dev/sda1 /mnt/boot/efi

# Setup swap 
dd if=/dev/zero of=/mnt/swap bs=1M count=1024 status=progress
chmod 0600 /mnt/swap
mkswap /mnt/swap
swapon /mnt/swap

# Install the system and some tools
pacstrap /mnt base linux linux-firmware base-devel efibootmgr grub vim git netctl dhcpcd amd-ucode intel-ucode 

# Generate fstab
genfstab -U /mnt >> /mnt/etc/fstab

# Enter the new system
arch-chroot /mnt /bin/bash

# Create user
useradd -G wheel -m -d /home/user user
passwd user

# Add sudo privileges
echo "%wheel ALL=(ALL) ALL" >> /etc/sudoers

# Set the time zone and a system clock
ln -sf /usr/share/zoneinfo/Europe/Moscow /etc/localtime
hwclock --systohc --utc

# Set default locale
echo -e "en_US.UTF-8 UTF-8\nru_RU.UTF-8 UTF-8" >> /etc/locale.gen

# Update current locale
locale-gen

# Set system language
echo LANG=en_US.UTF-8 >> /etc/locale.conf

# Set keymap and font for console 
echo -e "KEYMAP=ru\nFONT=cyr-sun16" >> /etc/vconsole.conf

# Set the hostname
echo lfs >> /etc/hostname

# Add multilib repo for pacman 
echo "[multilib]" >> /etc/pacman.conf 
echo "Include = /etc/pacman.d/mirrorlist" >> /etc/pacman.conf

# Setup grub
sed -i "s|^GRUB_TIMEOUT=.*|GRUB_TIMEOUT=1|" /etc/default/grub
sed -i "s|^GRUB_CMDLINE_LINUX_DEFAULT=.*|GRUB_CMDLINE_LINUX_DEFAULT='loglevel=3 quiet'|" /etc/default/grub
sed -i "s|^GRUB_CMDLINE_LINUX=.*|GRUB_CMDLINE_LINUX='cryptdevice=/dev/sda3:lfs'|" /etc/default/grub

# Configure mkinitcpio
sed -i "s|^HOOKS=.*|HOOKS=(base udev autodetect modconf block keyboard encrypt fsck filesystems)|" /etc/mkinitcpio.conf

# Regenerate initrd image
mkinitcpio -p linux

# Install grub and create configuration
grub-install --boot-directory=/boot --efi-directory=/boot/efi /dev/sda2
grub-mkconfig -o /boot/grub/grub.cfg
grub-mkconfig -o /boot/efi/EFI/arch/grub.cfg

# Exit new system and go into the cd shell
exit

# Reboot into the new system, don't forget to remove the usb
reboot

# symlink resolv.conf
sudo ln -sf /run/systemd/resolve/stub-resolv.conf /etc/resolv.conf

# Enable services at startup 
systemctl enable --now systemd-networkd
systemctl enable --now systemd-resolved

-------------------------------------------------------------------------
::TODO:: Update the installed packages. Finish configuration.
sudo pacman -Syu


# Optional: 

# AMD drivers
sudo pacman -S mesa lib32-mesa libva-mesa-driver mesa-vdpau xf86-video-amdgpu vulkan-radeon lib32-vulkan-radeon vulkan-icd-loader lib32-vulkan-icd-loader

# Window manager
sudo pacman -S i3-wm xorg-server xorg-xinit xorg-xev xorg-xprop xorg-xinput xorg-xsetroot xorg-xkill slock termite rofi nautilus xdg-user-dirs ttf-font-awesome arandr autorandr
paru -S polybar

sudo systemctl enable slock@user.service

# Laptop
sudo pacman -S libinput light tlp powertop libimobiledevice
sudo systemctl enable --now tlp
sudo powertop -c

# wi-fi, sound, bluetooth, vpn
sudo pacman -S iwd pulseaudio alsa-lib alsa-utils pavucontrol bluez bluez-utils blueman
paru  -S iwgtk

sudo systemctl enable --now iwd
sudo modprobe btusb
sudo systemctl enable --now bluetooth
gsettings set org.blueman.plugins.powermanager auto-power-on false

  # Disable POP and BEEP sound
  sudo sh -c "echo 'blacklist snd_hda_codec_realtek' >> /etc/modprobe.d/disable_pop.conf"
  sudo sh -c "echo 'blacklist pcspkr' >> /etc/modprobe.d/nobeep.conf"

# Office programs
sudo pacman -S libreoffice-still zathura zathura-pdf-mupdf 

# Look and feel
sudo pacman -S neofetch

# Utilities
sudo pacman -S man-db flameshot qbittorrent redshift mpv sxiv gedit 

# System tools
sudo pacman -S pacman-contrib bleachbit htop f2fs-tools dosfstools ntfs-3g gvfs gvfs-afc gvfs-gphoto2 udisks2 polkit-gnome 
paru -S timeshift-bin

# Network
sudo pacman -S wget reflector

# Multimedia
sudo pacman -S firefox telegram-desktop obs-studio discord 
paru -S zoom 

# Virtualisation 
sudo pacman -S virtualbox virtualbox-host-modules-arch 


----------------------------------------------------
wine qemu virt-manager virt-viewer dnsmasq vde2 bridge-utils openbsd-netcat libguestfs dmidecode ebtables iptables
sudo usermod -a -G libvirt user
sudo systemctl enable --now libvirtd.service

# Development
sudo pacman -S code

---------------------------------------------

# Security (create systemd file)
sudo pacman -S ufw etckeeper rkhunter clamav clamtk doas
paru -S chkrootkit

sudo ufw enable &&sudo ufw reload

#Disable root login over ssh
echo "PermitRootLogin no"| sudo tee -a /etc/ssh/sshd_config

 
echo "-:root:ALL except LOCAL" | sudo tee -a /etc/security/access.conf

# Disable root login
passwd --lock root








sudo freshclam

#if error freshclam
sudo systemctl stop clamav-daemon.service
sudo rm /var/log/clamav/freshclam.log
sudo systemctl start clamav-daemon.service
sudo systemctl status clamav-daemon.service


vim /etc/systemd/system/rkhunter.service

__________________________________________
[Unit]
Description=rkhunter rootkit scan and malware detection

Documentation=man:rkhunter

[Service]
ExecStartPre=/usr/bin/rkhunter –update
ExecStartPre=/usr/bin/rkhunter –propupd
ExecStart=/usr/bin/rkhunter –check -sk
SuccessExitStatus=1 2
____________________________________
vim /etc/systemd/system/rkhunter.timer

[Unit]
Description=Run rkhunter daily

[Timer]
OnCalendar=*-*-* 04:20:00
Persistent=true

RemainAfterElapse=true

[Install]
WantedBy=timers.target
___________________________________________

